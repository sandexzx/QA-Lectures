import asyncio
import logging
import os
import json
import random
from typing import List, Dict, Any
from pathlib import Path
import re

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from openai import OpenAI
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
NEUROAPI_API_KEY = os.getenv("NEUROAPI_API_KEY")
LECTURES_DIR = Path("lectures")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(
    base_url="https://neuroapi.host/v1",
    api_key=NEUROAPI_API_KEY,
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    waiting_for_answer = State()
    selecting_lecture = State()

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserDataManager:
    def __init__(self):
        self.data_file = Path("user_data.json")
        self.load_data()
    
    def load_data(self):
        if self.data_file.exists():
            with open(self.data_file, 'r', encoding='utf-8') as f:
                self.data = json.load(f)
        else:
            self.data = {}
    
    def save_data(self):
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(self.data, f, ensure_ascii=False, indent=2)
    
    def get_user_data(self, user_id: str) -> Dict[str, Any]:
        if user_id not in self.data:
            self.data[user_id] = {
                "max_lecture": None,
                "interview_active": False,
                "asked_questions": [],
                "ai_model": "gemini-2.5-flash"
            }
        return self.data[user_id]
    
    def update_user_data(self, user_id: str, **kwargs):
        user_data = self.get_user_data(user_id)
        user_data.update(kwargs)
        self.save_data()

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–µ–∫—Ü–∏—è–º–∏
class LectureManager:
    def __init__(self, lectures_dir: Path):
        self.lectures_dir = lectures_dir
        self.lectures = self.load_lectures()
    
    def load_lectures(self) -> List[Dict[str, Any]]:
        lectures = []
        if not self.lectures_dir.exists():
            logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {self.lectures_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return lectures
        
        for file_path in self.lectures_dir.glob("*.md"):
            match = re.match(r'(\d+(?:\.\d+)*)\.\s*(.+)\.md', file_path.name)
            if match:
                number = match.group(1)
                title = match.group(2).replace('_', ' ').replace('-', ' ')
                lectures.append({
                    "number": number,
                    "title": title,
                    "file_path": file_path
                })
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä–∞–º
        lectures.sort(key=lambda x: [int(n) for n in x["number"].split('.')])
        return lectures
    
    def get_lectures_up_to(self, max_lecture: str) -> List[Dict[str, Any]]:
        if not max_lecture:
            return []
        
        max_parts = [int(n) for n in max_lecture.split('.')]
        filtered_lectures = []
        
        for lecture in self.lectures:
            lecture_parts = [int(n) for n in lecture["number"].split('.')]
            if self.compare_lecture_numbers(lecture_parts, max_parts) <= 0:
                filtered_lectures.append(lecture)
        
        return filtered_lectures
    
    def compare_lecture_numbers(self, parts1: List[int], parts2: List[int]) -> int:
        min_len = min(len(parts1), len(parts2))
        for i in range(min_len):
            if parts1[i] < parts2[i]:
                return -1
            elif parts1[i] > parts2[i]:
                return 1
        return len(parts1) - len(parts2)
    
    def get_lecture_content(self, lecture: Dict[str, Any]) -> str:
        try:
            with open(lecture["file_path"], 'r', encoding='utf-8') as f:
                return f.read()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {lecture['file_path']}: {e}")
            return ""

# –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
user_manager = UserDataManager()
lecture_manager = LectureManager(LECTURES_DIR)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton(text="üéØ –†–µ–∂–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è", callback_data="interview_mode")]
    ])
    return keyboard

# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
def get_settings_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –í—ã–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ª–µ–∫—Ü–∏—é", callback_data="select_lecture")],
        [InlineKeyboardButton(text="ü§ñ –í—ã–±—Ä–∞—Ç—å AI –º–æ–¥–µ–ª—å", callback_data="select_model")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–µ–∫—Ü–∏–π
def get_lecture_selection_keyboard():
    keyboard = []
    for lecture in lecture_manager.lectures:
        button_text = f"{lecture['number']}. {lecture['title']}"
        callback_data = f"lecture_{lecture['number']}"
        keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ AI –º–æ–¥–µ–ª–∏
def get_model_selection_keyboard():
    models = [
        ("gpt-4.1", "GPT-4.1"),
        ("claude-sonnet-4-all", "Claude Sonnet 4 All"),
        ("o3-mini", "O3 Mini"),
        ("o4-mini", "O4 Mini"),
        ("gemini-2.5-flash-lite-preview-06-17", "Gemini 2.5 Flash Lite Preview"),
        ("gemini-2.5-flash", "Gemini 2.5 Flash")
    ]
    
    keyboard = []
    for model_code, model_name in models:
        callback_data = f"model_{model_code}"
        keyboard.append([InlineKeyboardButton(text=model_name, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é! üéØ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )

@dp.callback_query(F.data == "settings")
async def settings_callback(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    user_data = user_manager.get_user_data(user_id)
    
    current_lecture = user_data.get("max_lecture", "–ù–µ –≤—ã–±—Ä–∞–Ω–∞")
    current_model = user_data.get("ai_model", "gemini-2.5-flash")
    text = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–¢–µ–∫—É—â–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è –ª–µ–∫—Ü–∏—è: {current_lecture}\n–¢–µ–∫—É—â–∞—è AI –º–æ–¥–µ–ª—å: {current_model}"
    
    await callback.message.edit_text(text, reply_markup=get_settings_menu())

@dp.callback_query(F.data == "select_lecture")
async def select_lecture_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑—É—á–µ–Ω–Ω—É—é –ª–µ–∫—Ü–∏—é:",
        reply_markup=get_lecture_selection_keyboard()
    )
    await state.set_state(UserStates.selecting_lecture)

@dp.callback_query(F.data.startswith("lecture_"))
async def lecture_selected_callback(callback: CallbackQuery, state: FSMContext):
    lecture_number = callback.data.replace("lecture_", "")
    user_id = str(callback.from_user.id)
    
    user_manager.update_user_data(user_id, max_lecture=lecture_number)
    
    await callback.message.edit_text(
        f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ª–µ–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {lecture_number}",
        reply_markup=get_settings_menu()
    )
    await state.clear()

@dp.callback_query(F.data == "select_model")
async def select_model_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ AI –º–æ–¥–µ–ª—å:",
        reply_markup=get_model_selection_keyboard()
    )

@dp.callback_query(F.data.startswith("model_"))
async def model_selected_callback(callback: CallbackQuery):
    model_code = callback.data.replace("model_", "")
    user_id = str(callback.from_user.id)
    
    user_manager.update_user_data(user_id, ai_model=model_code)
    
    await callback.message.edit_text(
        f"‚úÖ AI –º–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {model_code}",
        reply_markup=get_settings_menu()
    )

@dp.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )

@dp.callback_query(F.data == "interview_mode")
async def interview_mode_callback(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    user_data = user_manager.get_user_data(user_id)
    
    if not user_data.get("max_lecture"):
        await callback.message.edit_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑—É—á–µ–Ω–Ω—É—é –ª–µ–∫—Ü–∏—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!",
            reply_markup=get_main_menu()
        )
        return
    
    user_manager.update_user_data(user_id, interview_active=True)
    
    await callback.message.edit_text("üéØ –†–µ–∂–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å...")
    await generate_and_send_question(callback.message, user_id, state)

async def generate_and_send_question(message: Message, user_id: str, state: FSMContext):
    user_data = user_manager.get_user_data(user_id)
    max_lecture = user_data.get("max_lecture")
    asked_questions = user_data.get("asked_questions", [])
    
    available_lectures = lecture_manager.get_lectures_up_to(max_lecture)
    
    if not available_lectures:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–µ–∫—Ü–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return
    
    # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º 1-3 –ª–µ–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
    num_lectures_to_use = random.randint(1, min(3, len(available_lectures)))
    selected_lectures = random.sample(available_lectures, num_lectures_to_use)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ª–µ–∫—Ü–∏–π
    lecture_contents = []
    for lecture in selected_lectures:
        content = lecture_manager.get_lecture_content(lecture)
        lecture_contents.append(f"–õ–µ–∫—Ü–∏—è {lecture['number']}: {lecture['title']}\n{content}")
    
    all_content = "\n\n".join(lecture_contents)
    
    logger.info(f"Selected {num_lectures_to_use} lectures out of {len(available_lectures)} available")
    logger.info(f"Selected lectures: {[l['number'] for l in selected_lectures]}")
    
    logger.info(f"Loaded {len(available_lectures)} lectures")
    logger.info(f"Total content length: {len(all_content)} characters")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
    if len(all_content.strip()) == 0:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–µ–∫—Ü–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã.")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ API
    try:
        # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        asked_questions_text = ""
        if asked_questions:
            asked_questions_text = f"\n\n–†–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–ù–ï –ø–æ–≤—Ç–æ—Ä—è–π –∏—Ö):\n" + "\n".join(asked_questions[-5:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤
        
        question_types = [
            "–≤–æ–ø—Ä–æ—Å –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –Ω–∞ –∑–Ω–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å –≤ –ª–µ–∫—Ü–∏–∏)",
            "–≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –Ω–∞ –∑–Ω–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å –≤ –ª–µ–∫—Ü–∏–∏)"
        ]
        
        question_type = random.choice(question_types)
        
        selected_titles = [f"{l['number']}. {l['title']}" for l in selected_lectures]
        
        prompt = f"""–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –ø–æ QA/—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é. –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å–æ–∑–¥–∞–π –æ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.

–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –ª–µ–∫—Ü–∏–π ({', '.join(selected_titles)}):
{all_content}{asked_questions_text}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–æ–ø—Ä–æ—Å—É:
- –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {question_type}
- –û—Å–Ω–æ–≤—ã–≤–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–µ–∫—Ü–∏–π
- –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º
- –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –æ —Ç–æ–º, —á—Ç–æ –ü–û–î–†–û–ë–ù–û –æ–±—ä—è—Å–Ω–µ–Ω–æ –≤ –ª–µ–∫—Ü–∏–∏
- –ù–ï —Å–ø—Ä–∞—à–∏–≤–∞–π –æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –≤ –ª–µ–∫—Ü–∏–∏ –Ω–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- –ù–ï —Ç—Ä–µ–±—É–π –∑–Ω–∞–Ω–∏–π –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –∏ –º–µ—Ç–æ–¥–∏–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–ª—å–∫–æ —É–ø–æ–º—è–Ω—É—Ç—ã, –Ω–æ –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã
- –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
- –ë—ã—Ç—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–∞–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏
- –ù–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç—ã–º –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–º
- –û–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–µ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
- –í–ê–ñ–ù–û: –ù–µ –≤—ã—Ö–æ–¥–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ª–µ–∫—Ü–∏–π
- –í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤ –ª–µ–∫—Ü–∏–∏ —á—Ç–æ-—Ç–æ —Ç–æ–ª—å–∫–æ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è - –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–π –æ–± —ç—Ç–æ–º
- –í–ê–ñ–ù–û: –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã!
- –ú–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç: "–í —Ä–∞–º–∫–∞—Ö —Ä–∞–±–æ—Ç—ã QA-–∏–Ω–∂–µ–Ω–µ—Ä–∞..." –∏–ª–∏ "–ü—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏..."

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π."""

        user_data = user_manager.get_user_data(user_id)
        selected_model = user_data.get("ai_model", "gemini-2.5-flash")
        
        completion = client.chat.completions.create(
            model=selected_model,
            messages=[
                {"role": "user", "content": prompt}
            ],
            max_tokens=300,
            temperature=0.7
        )
        
        logger.info(f"API Response: {completion}")
        
        question = completion.choices[0].message.content
        if question:
            question = question.strip()
        else:
            question = ""
        
        logger.info(f"Generated question: '{question}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø—É—Å—Ç–æ–π
        if not question or len(question.strip()) == 0:
            logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å –æ—Ç API")
            question = "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ."
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next_question")],
            [InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", callback_data="end_interview")]
        ])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        asked_questions.append(question)
        user_manager.update_user_data(user_id, asked_questions=asked_questions)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ª–µ–∫—Ü–∏—è—Ö
        lectures_info = f"üìö *–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞:* {', '.join(selected_titles)}\n\n"
        
        await message.answer(f"‚ùì **–í–æ–ø—Ä–æ—Å –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:**\n\n{lectures_info}{question}", reply_markup=keyboard)
        await state.set_state(UserStates.waiting_for_answer)
        await state.update_data(last_question=question, lecture_content=all_content, conversation_history=[])
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.callback_query(F.data == "next_question")
async def next_question_callback(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    await callback.message.edit_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å...")
    await generate_and_send_question(callback.message, user_id, state)

@dp.callback_query(F.data == "end_interview")
async def end_interview_callback(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    user_data = user_manager.get_user_data(user_id)
    questions_count = len(user_data.get("asked_questions", []))
    
    user_manager.update_user_data(user_id, interview_active=False, asked_questions=[])
    
    await callback.message.edit_text(
        f"üèÅ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤. –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! üëè",
        reply_markup=get_main_menu()
    )
    await state.clear()

@dp.message(StateFilter(UserStates.waiting_for_answer))
async def handle_answer(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    user_data = user_manager.get_user_data(user_id)
    
    if not user_data.get("interview_active"):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤–æ–ø—Ä–æ—Å–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    last_question = state_data.get("last_question", "")
    conversation_history = state_data.get("conversation_history", [])
    
    await message.answer("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –æ—Ç–≤–µ—Ç...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    conversation_history.append({"role": "user", "content": message.text})
    await state.update_data(conversation_history=conversation_history)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await analyze_user_answer(message, user_id, last_question, conversation_history, state)

async def analyze_user_answer(message: Message, user_id: str, question: str, conversation_history: list, state: FSMContext):
    state_data = await state.get_data()
    lecture_content = state_data.get("lecture_content", "")
    
    try:
        user_data = user_manager.get_user_data(user_id)
        selected_model = user_data.get("ai_model", "gemini-2.5-flash")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        if len(conversation_history) == 1:
            system_prompt = f"""–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ QA/—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é. –£—á–µ–Ω–∏–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É –ª–µ–∫—Ü–∏–π.

–ú–∞—Ç–µ—Ä–∏–∞–ª –ª–µ–∫—Ü–∏–π:
{lecture_content}

–í–æ–ø—Ä–æ—Å: {question}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –∫–∞–∫ —É—á–∏—Ç–µ–ª—è:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞
2. –î–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
3. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–π –∏–ª–∏ –Ω–µ—Ç–æ—á–Ω—ã–π - –∑–∞–¥–∞—Ç—å –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
4. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Ö–æ—Ä–æ—à–∏–π - –ø–æ—Ö–≤–∞–ª–∏—Ç—å –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
5. –ë—ã—Ç—å –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
- –ù–∞—á–Ω–∏ —Å –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞ (–ø–æ 5 –±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ)
- –î–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
- –ï—Å–ª–∏ –Ω—É–∂–Ω–æ - –∑–∞–¥–∞–π –Ω–∞–≤–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –¥–∞–π –ø–æ–¥—Å–∫–∞–∑–∫—É

–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —É—á–∏—Ç–µ–ª—å, –∞ –Ω–µ –∫–∞–∫ —Å—Ç—Ä–æ–≥–∏–π HR."""
            
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": conversation_history[0]["content"]}
            ]
        else:
            # –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–µ–≥–æ—Å—è –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = conversation_history.copy()
        
        completion = client.chat.completions.create(
            model=selected_model,
            messages=messages,
            max_tokens=500,
            temperature=0.7
        )
        
        feedback = completion.choices[0].message.content.strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        conversation_history.append({"role": "assistant", "content": feedback})
        await state.update_data(conversation_history=conversation_history)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –î–æ–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data="continue_answer")],
            [InlineKeyboardButton(text="üîÑ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next_question")],
            [InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", callback_data="end_interview")]
        ])
        
        await message.answer(f"üë®‚Äçüè´ **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:**\n\n{feedback}", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next_question")],
            [InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", callback_data="end_interview")]
        ])
        
        await message.answer(
            "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç! –ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=keyboard
        )

@dp.callback_query(F.data == "continue_answer")
async def continue_answer_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üí¨ –ú–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next_question")],
            [InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", callback_data="end_interview")]
        ])
    )
    await state.set_state(UserStates.waiting_for_answer)

async def main():
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    if not NEUROAPI_API_KEY:
        logger.error("NEUROAPI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())